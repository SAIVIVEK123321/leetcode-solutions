# 🚀 LeetCode Solutions

This repository contains my solutions to **LeetCode problems** with explanations in multiple languages.  
Each problem includes the description, approach, and solutions in Python, Java, C++, and more.

---

## 📂 Problems

### 3000. Maximum Area of Longest Diagonal Rectangle
📌 [Problem Link](https://leetcode.com/problems/maximum-area-of-longest-diagonal-rectangle/)  
📖 Source: Weekly Contest 379 Q1  

---

#### Description
You are given a 2D 0-indexed integer array `dimensions`.  
For all indices `i`, `0 <= i < dimensions.length`,  
`dimensions[i][0]` represents the length and `dimensions[i][1]` represents the width of the rectangle `i`.

Return the **area of the rectangle having the longest diagonal**.  
If there are multiple rectangles with the longest diagonal, return the one with the **maximum area**.

---

#### Examples

**Example 1**

---

#### Solution Idea
- Use **Pythagoras theorem** → diagonal² = `l² + w²`
- No need to take square root (comparison works with squares).
- Keep track of:
  - Maximum diagonal length (squared)
  - Area of rectangle with that diagonal
- If diagonals are equal, return rectangle with **maximum area**.

⏱ Time Complexity: **O(n)**  
💾 Space Complexity: **O(1)**

---

#### 🐍 Python
```python
from typing import List

class Solution:
    def areaOfMaxDiagonal(self, dimensions: List[List[int]]) -> int:
        ans = mx = 0
        for l, w in dimensions:
            t = l**2 + w**2
            if mx < t:
                mx = t
                ans = l * w
            elif mx == t:
                ans = max(ans, l * w)
        return ans
☕ Java
class Solution {
    public int areaOfMaxDiagonal(int[][] dimensions) {
        int ans = 0, mx = 0;
        for (var d : dimensions) {
            int l = d[0], w = d[1];
            int t = l * l + w * w;
            if (mx < t) {
                mx = t;
                ans = l * w;
            } else if (mx == t) {
                ans = Math.max(ans, l * w);
            }
        }
        return ans;
    }
}
⚡ C++
class Solution {
public:
    int areaOfMaxDiagonal(vector<vector<int>>& dimensions) {
        int ans = 0, mx = 0;
        for (auto& d : dimensions) {
            int l = d[0], w = d[1];
            int t = l * l + w * w;
            if (mx < t) {
                mx = t;
                ans = l * w;
            } else if (mx == t) {
                ans = max(ans, l * w);
            }
        }
        return ans;
    }
};
🐹 Go
func areaOfMaxDiagonal(dimensions [][]int) (ans int) {
    mx := 0
    for _, d := range dimensions {
        l, w := d[0], d[1]
        t := l*l + w*w
        if mx < t {
            mx = t
            ans = l * w
        } else if mx == t {
            ans = max(ans, l*w)
        }
    }
    return
}

func max(a, b int) int {
    if a > b {
        return a
    }
    return b
}
🌐 TypeScript
function areaOfMaxDiagonal(dimensions: number[][]): number {
    let [ans, mx] = [0, 0];
    for (const [l, w] of dimensions) {
        const t = l * l + w * w;
        if (mx < t) {
            mx = t;
            ans = l * w;
        } else if (mx === t) {
            ans = Math.max(ans, l * w);
        }
    }
    return ans;
}

🦀 Rust
impl Solution {
    pub fn area_of_max_diagonal(dimensions: Vec<Vec<i32>>) -> i32 {
        let mut ans = 0;
        let mut mx = 0;
        for d in dimensions {
            let l = d[0];
            let w = d[1];
            let t = l * l + w * w;
            if mx < t {
                mx = t;
                ans = l * w;
            } else if mx == t {
                ans = ans.max(l * w);
            }
        }
        ans
    }
}

🔷 C#
public class Solution {
    public int AreaOfMaxDiagonal(int[][] dimensions) {
        int ans = 0, mx = 0;
        foreach (var d in dimensions) {
            int l = d[0], w = d[1];
            int t = l * l + w * w;
            if (mx < t) {
                mx = t;
                ans = l * w;
            } else if (mx == t) {
                ans = Math.Max(ans, l * w);
            }
        }
        return ans;
    }
}

